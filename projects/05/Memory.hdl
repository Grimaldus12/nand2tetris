//============================================================
// USERID:........ KMANZANA
// PROGRAMMER:.... Manzanares, Kelton M.
// COURSE:........ CSCI-410
// TERM:.......... SP14
// PROJECT:....... 05
// FILENAME:...... Memory.hdl
//============================================================

// This file is based on a file from www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load=1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

// 0x0000-0x3FFF
// 000 0000 0000 0000
// 011 1111 1111 1111

// 0x4000-0x5FFF
// 100 0000 0000 0000
// 101 1111 1111 1111

// 0x6000
// 110 0000 0000 0000

CHIP Memory {
  IN in[16], load, address[15];
  OUT out[16];

  PARTS:
  Not(in=address[14], out=memaddress);
  And(a=load, b=memaddress, out=memload);
  RAM16K(in=in, load=memload, address=address[0..13], out=mem);

  Not(in=address[13], out=not13);
  And(a=address[14], b=not13, out=screenaddress);
  And(a=screenaddress, b=load, out=screenload);
  Screen(in=in, load=screenload, address=address[0..12], out=screen);

  Keyboard(out=keyboard);
  Mux16(a=screen, b=keyboard, sel=address[13], out=io);

  Mux16(a=mem, b=io, sel=address[14], out=out);
}
