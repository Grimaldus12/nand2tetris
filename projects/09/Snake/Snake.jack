class Snake {
  static SnakePen pen;
  static boolean exit;
  static char Q, E;

  field int length, velocity, index;
  field Array positions;
  field char direction;

  constructor Snake new(int setLength, int setVelocity, SnakePen setPen) {
    let length   = setLength;
    let velocity = (11 - setVelocity) * 2; // expecting 1 - 10
    let pen      = setPen;
    let index    = 0;

    let exit   = false;
    let Q      = 81;
    let E      = 69;

    let positions = Array.new(length);
    let direction = SnakePen.initialDirection();

    do initPositions();
    do move();

    return this;
  }

  method void dispose() {
    return;
  }

  method void run() {
    var char key;

    while (~exit) {
      while (key = 0) {
        let key = Keyboard.keyPressed();
        do move();
      }

      if ((key > (SnakePen.directionMin() - 1)) & (key < (SnakePen.directionMax() + 1))) {
        let direction = key;
      }
      if ((key = Q) | (key = E)) {
        let exit = true;
      }

      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
        do move();
      }
    }

    return;
  }

  method void move() {
    var Array tail, head;

    let tail = positions[incrementedIndex()];
    let head = positions[index];

    do Screen.setColor(false);
    do Screen.drawPixel(tail[0], tail[1]);

    let tail[0] = pen.nextXPosition(head[0], direction);
    let tail[1] = pen.nextYPosition(head[1], direction);

    do Screen.setColor(true);
    do Screen.drawPixel(tail[0], tail[1]);

    let index = incrementedIndex();

    do Sys.wait(velocity);

    return;
  }

  method void initPositions() {
    var int i;
    var Array coordinate;

    while (i < length) {
      let coordinate = Array.new(2);
      let coordinate[0] = pen.getXMax();
      let coordinate[1] = pen.getYMid();

      let positions[i] = coordinate;

      let i = i + 1;
    }

    return;
  }

  method void printPositions() {
    var Array tmp;
    var int i;

    let i = 0;

    while (i < length) {
      let tmp = positions[i];
      do Output.printInt(tmp[0]);
      do Output.printString(" ");
      do Output.printInt(tmp[1]);
      do Output.printString(" ");

      let i = i + 1;
    }

    do Output.println();

    return;
  }

  method int incrementedIndex() {
    if ((index + 1) = length) {
      return 0;
    } else {
      return index + 1;
    }
  }
}
