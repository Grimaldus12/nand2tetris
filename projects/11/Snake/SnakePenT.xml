<tokens>
<keyword> class </keyword>
<identifier> SnakePen </identifier>
<symbol> { </symbol>
<keyword> static </keyword>
<keyword> char </keyword>
<identifier> up </identifier>
<symbol> , </symbol>
<identifier> right </identifier>
<symbol> , </symbol>
<identifier> down </identifier>
<symbol> , </symbol>
<identifier> left </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> xMin </identifier>
<symbol> , </symbol>
<identifier> yMin </identifier>
<symbol> , </symbol>
<identifier> xMax </identifier>
<symbol> , </symbol>
<identifier> yMax </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> SnakePen </identifier>
<identifier> setSize </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> setXMin </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> setYMin </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> setXMax </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> setYMax </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> up </identifier>
<symbol> = </symbol>
<integerConstant> 131 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> right </identifier>
<symbol> = </symbol>
<integerConstant> 132 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> down </identifier>
<symbol> = </symbol>
<integerConstant> 133 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> left </identifier>
<symbol> = </symbol>
<integerConstant> 130 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> xMin </identifier>
<symbol> = </symbol>
<identifier> setXMin </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> yMin </identifier>
<symbol> = </symbol>
<identifier> setYMin </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> xMax </identifier>
<symbol> = </symbol>
<identifier> setXMax </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> yMax </identifier>
<symbol> = </symbol>
<identifier> setYMax </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> nextXPosition </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> position </identifier>
<symbol> , </symbol>
<keyword> char </keyword>
<identifier> direction </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<identifier> right </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> position </identifier>
<symbol> = </symbol>
<identifier> xMax </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> xMin </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> position </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<identifier> left </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> position </identifier>
<symbol> = </symbol>
<identifier> xMin </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> xMax </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> position </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> position </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> nextYPosition </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> position </identifier>
<symbol> , </symbol>
<keyword> char </keyword>
<identifier> direction </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<identifier> down </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> position </identifier>
<symbol> = </symbol>
<identifier> yMax </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> yMin </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> position </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> direction </identifier>
<symbol> = </symbol>
<identifier> up </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> position </identifier>
<symbol> = </symbol>
<identifier> yMin </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> yMax </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> position </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> position </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getYMid </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> yMax </identifier>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getXMax </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> max </identifier>
<symbol> ( </symbol>
<identifier> xMax </identifier>
<symbol> , </symbol>
<identifier> xMin </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier> directionMin </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> rl </identifier>
<symbol> , </symbol>
<identifier> ud </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rl </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> min </identifier>
<symbol> ( </symbol>
<identifier> right </identifier>
<symbol> , </symbol>
<identifier> left </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> ud </identifier>
<symbol> = </symbol>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> min </identifier>
<symbol> ( </symbol>
<identifier> up </identifier>
<symbol> , </symbol>
<identifier> down </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> min </identifier>
<symbol> ( </symbol>
<identifier> rl </identifier>
<symbol> , </symbol>
<identifier> ud </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier> directionMax </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> down </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier> initialDirection </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> right </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
